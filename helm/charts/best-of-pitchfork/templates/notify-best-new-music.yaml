{{- range .Values.postTypes }}
#apiVersion: batch/v1
#kind: Job
#metadata:
#  name: best-new-music-notifier-8
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ $.Release.Name }}-{{ . }}-notifier
  labels:
    heritage: {{ $.Release.Service }}
    release: {{ $.Release.Name }}
    chart: {{ $.Chart.Name }}-{{ $.Chart.Version | replace "+" "_" }}
    app: {{ template "name" $ }}
spec:
  schedule: "*/1 * * * *"
#  suspend: true
  suspend: false
  concurrencyPolicy: Replace
  startingDeadlineSeconds: 30
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: music-notifier
          initContainers:
          - name: recent-reviews-fetcher
            image: python:3-alpine
            envFrom:
            - configMapRef:
                name: {{ $.Release.Name }}-environment
            - configMapRef:
                name: {{ $.Release.Name }}-last-seen-{{ . }}
            env:
            - name: POST_TYPE
              value: {{ . | quote }}
            volumeMounts:
            - mountPath: /scripts
              name: scripts-dir
            - mountPath: /out
              name: scripts-output-dir
            command:
            - sh
            - -c
            - |
              for script in /scripts/1*.sh; do
                echo "Executing script: $script"
                sh $script
              done
          - name: result-poster
            image: endeveit/docker-jq
            volumeMounts:
            - name: scripts-output-dir
              mountPath: /out
            envFrom:
            - secretRef:
                name: {{ $.Release.Name }}-webhooks-{{ . }}
            env:
            - name: POST_TYPE
              value: {{ . | quote }}
            command:
            - sh
            - -c
            - |
              for script in /scripts/2*.sh; do
                echo "Executing script: $script"
                sh $script
              done
          containers:
          - name: update-latest
            image: dtzar/helm-kubectl
            envFrom:
            - configMapRef:
                name: {{ $.Release.Name }}-environment
            env:
            - name: POST_TYPE
              value: {{ . | quote }}
            volumeMounts:
            - mountPath: /scripts
              name: scripts-dir
            - mountPath: /out
              name: scripts-output-dir
            command:
            - sh
            - -c
            - |
              for script in /scripts/3*.sh; do
                echo "Executing script: $script"
                sh $script
              done
          volumes:
          - name: scripts-dir
            configMap:
              name: {{ $.Release.Name }}-scripts
          - name: scripts-output-dir
            emptyDir: {}
          restartPolicy: Never
{{- end }}